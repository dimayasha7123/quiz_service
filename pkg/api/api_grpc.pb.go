// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuizServiceClient is the client API for QuizService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizServiceClient interface {
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserID, error)
	GetQuizList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*QuizList, error)
	StartQuizParty(ctx context.Context, in *QuizUserInfo, opts ...grpc.CallOption) (*QuizParty, error)
	SendAnswers(ctx context.Context, in *AnswersPack, opts ...grpc.CallOption) (*SingleTop, error)
	GetQuizTop(ctx context.Context, in *QuizUserInfo, opts ...grpc.CallOption) (*SingleTop, error)
	GetGlobalQuizTop(ctx context.Context, in *QuizID, opts ...grpc.CallOption) (*GlobalTop, error)
}

type quizServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizServiceClient(cc grpc.ClientConnInterface) QuizServiceClient {
	return &quizServiceClient{cc}
}

func (c *quizServiceClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserID, error) {
	out := new(UserID)
	err := c.cc.Invoke(ctx, "/api.QuizService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizServiceClient) GetQuizList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*QuizList, error) {
	out := new(QuizList)
	err := c.cc.Invoke(ctx, "/api.QuizService/GetQuizList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizServiceClient) StartQuizParty(ctx context.Context, in *QuizUserInfo, opts ...grpc.CallOption) (*QuizParty, error) {
	out := new(QuizParty)
	err := c.cc.Invoke(ctx, "/api.QuizService/StartQuizParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizServiceClient) SendAnswers(ctx context.Context, in *AnswersPack, opts ...grpc.CallOption) (*SingleTop, error) {
	out := new(SingleTop)
	err := c.cc.Invoke(ctx, "/api.QuizService/SendAnswers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizServiceClient) GetQuizTop(ctx context.Context, in *QuizUserInfo, opts ...grpc.CallOption) (*SingleTop, error) {
	out := new(SingleTop)
	err := c.cc.Invoke(ctx, "/api.QuizService/GetQuizTop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizServiceClient) GetGlobalQuizTop(ctx context.Context, in *QuizID, opts ...grpc.CallOption) (*GlobalTop, error) {
	out := new(GlobalTop)
	err := c.cc.Invoke(ctx, "/api.QuizService/GetGlobalQuizTop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizServiceServer is the server API for QuizService service.
// All implementations must embed UnimplementedQuizServiceServer
// for forward compatibility
type QuizServiceServer interface {
	AddUser(context.Context, *User) (*UserID, error)
	GetQuizList(context.Context, *emptypb.Empty) (*QuizList, error)
	StartQuizParty(context.Context, *QuizUserInfo) (*QuizParty, error)
	SendAnswers(context.Context, *AnswersPack) (*SingleTop, error)
	GetQuizTop(context.Context, *QuizUserInfo) (*SingleTop, error)
	GetGlobalQuizTop(context.Context, *QuizID) (*GlobalTop, error)
	mustEmbedUnimplementedQuizServiceServer()
}

// UnimplementedQuizServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuizServiceServer struct {
}

func (UnimplementedQuizServiceServer) AddUser(context.Context, *User) (*UserID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedQuizServiceServer) GetQuizList(context.Context, *emptypb.Empty) (*QuizList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuizList not implemented")
}
func (UnimplementedQuizServiceServer) StartQuizParty(context.Context, *QuizUserInfo) (*QuizParty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartQuizParty not implemented")
}
func (UnimplementedQuizServiceServer) SendAnswers(context.Context, *AnswersPack) (*SingleTop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAnswers not implemented")
}
func (UnimplementedQuizServiceServer) GetQuizTop(context.Context, *QuizUserInfo) (*SingleTop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuizTop not implemented")
}
func (UnimplementedQuizServiceServer) GetGlobalQuizTop(context.Context, *QuizID) (*GlobalTop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalQuizTop not implemented")
}
func (UnimplementedQuizServiceServer) mustEmbedUnimplementedQuizServiceServer() {}

// UnsafeQuizServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizServiceServer will
// result in compilation errors.
type UnsafeQuizServiceServer interface {
	mustEmbedUnimplementedQuizServiceServer()
}

func RegisterQuizServiceServer(s grpc.ServiceRegistrar, srv QuizServiceServer) {
	s.RegisterService(&QuizService_ServiceDesc, srv)
}

func _QuizService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.QuizService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizService_GetQuizList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).GetQuizList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.QuizService/GetQuizList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).GetQuizList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizService_StartQuizParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuizUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).StartQuizParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.QuizService/StartQuizParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).StartQuizParty(ctx, req.(*QuizUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizService_SendAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswersPack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).SendAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.QuizService/SendAnswers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).SendAnswers(ctx, req.(*AnswersPack))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizService_GetQuizTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuizUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).GetQuizTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.QuizService/GetQuizTop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).GetQuizTop(ctx, req.(*QuizUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizService_GetGlobalQuizTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuizID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).GetGlobalQuizTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.QuizService/GetGlobalQuizTop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).GetGlobalQuizTop(ctx, req.(*QuizID))
	}
	return interceptor(ctx, in, info, handler)
}

// QuizService_ServiceDesc is the grpc.ServiceDesc for QuizService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuizService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.QuizService",
	HandlerType: (*QuizServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _QuizService_AddUser_Handler,
		},
		{
			MethodName: "GetQuizList",
			Handler:    _QuizService_GetQuizList_Handler,
		},
		{
			MethodName: "StartQuizParty",
			Handler:    _QuizService_StartQuizParty_Handler,
		},
		{
			MethodName: "SendAnswers",
			Handler:    _QuizService_SendAnswers_Handler,
		},
		{
			MethodName: "GetQuizTop",
			Handler:    _QuizService_GetQuizTop_Handler,
		},
		{
			MethodName: "GetGlobalQuizTop",
			Handler:    _QuizService_GetGlobalQuizTop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
