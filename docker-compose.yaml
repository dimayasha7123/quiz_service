version: "3.8"
volumes:
  qs_data:
  redis-data:
  redis-conf:
services:
  db:
    image: postgres:13.3
    restart: always
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - qs_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"
        ]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 5s
  goose:
    build:
      context: ./server
      dockerfile: goose.dockerfile
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
  qserver:
    build:
      context: ./
      dockerfile: server/server.dockerfile
    command: [ "-with_mTLS=${WITH_MTLS}" ]
    env_file:
      - .env
    ports:
      - ${SOCKET_GRPC_PORT}:${SOCKET_GRPC_PORT}
      - ${SOCKET_HTTP_PORT}:${SOCKET_HTTP_PORT}
    restart: always
    volumes:
      - ./allowed_clients.yaml:/app/allowed_clients.yaml
      - ./certs:/app/certs
    depends_on:
      db:
        condition: service_healthy
      goose:
        condition: service_completed_successfully
  redis:
    image: redis:alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    restart: always
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - redis-data:/data
      - redis-conf:/usr/local/etc/redis/redis.conf
    env_file:
      - .env
  client:
    build:
      context: ./
      dockerfile: tg_client/client.dockerfile
    command: [ "-with_mTLS=${WITH_MTLS}" ]
    env_file:
      - .env
    restart: always
    volumes:
      - ./certs:/app/certs
    depends_on:
      redis:
        condition: service_started
      qserver:
        condition: service_started
